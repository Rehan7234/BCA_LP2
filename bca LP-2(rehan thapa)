answer1:


#include <iostream>
using namespace std;
#define rows 3
#define cols 3
class demo{
  private:
  int A[rows][cols];
    public:
  void get_data(){
      for (int i=0;i<rows;i++)
		{
		for(int j=0;j<cols;j++)
		{
			cin>>A[i][j];
		}
		}
}
void show_data(){
    for (int i=0;i<rows;i++)
	{
  		for(int j=0;j<cols;j++)
		{
    		cout<<A[i][j]<<"\t";
		}
		cout<<endl;
	} 
}
demo operator *(demo obj){
    demo temp;
    for (int i=0;i<rows;i++)
    {
        for(int j=0;j<cols;j++)
        {
            temp.A[i][j]=A[i][j]*obj.A[i][j];
        }
        
    } 
    return temp;
}
};
int main(){
    demo d1,d2,d3;
    cout<<"Enter data for first matrix.."<<endl;
    d1.get_data();
     cout<<"Enter data for second matrix.."<<endl;
    d2.get_data();
    cout<<"First matrix.."<<endl;
    d1.show_data();
    cout<<"second matrix.."<<endl;
    d2.show_data();
    d3=d1*d2;
    cout<<"third matrix.."<<endl;
    d3.show_data();
    
}




answer3:

#include <iostream>

class Test {
private:
    int num1, num2, num3;

public:
    // Member function to get data
    void get_data(int n1 = 0, int n2 = 0, int n3 = 0) {
        num1 = n1;
        num2 = n2;
        num3 = n3;
    }

    // Member function to show data
    void show_data() {
        std::cout << "Object 1: (" << num1 << ", " << num2 << ", " << num3 << ")" << std::endl;
    }
};

int main() {
    Test obj1, obj2, obj3;

    // Invoking get_data() for obj1 with one argument
    obj1.get_data(10);

    // Invoking get_data() for obj2 with two arguments
    obj2.get_data(20, 21);

    // Invoking get_data() for obj3 with three arguments
    obj3.get_data(30, 31, 32);

    // Displaying the values of all objects
    std::cout << "Values after initialization:" << std::endl;
    obj1.show_data();
    obj2.show_data();
    obj3.show_data();

    return 0;
}



answer4:


#include <iostream>
using namespace std;

class BCA_OOPS {
    private:
        int real, imag;
    public:
        // Default constructor
        BCA_OOPS() {
            real = 0;
            imag = 0;
        }

        // Parameterized constructor
        BCA_OOPS(int r, int i) {
            real = r;
            imag = i;
        }

        // Member function to display values
        void display() {
            cout << "Real: " << real << ", Imaginary: " << imag << endl;
        }

        // Function in global scope to display values
        friend void displayValues(BCA_OOPS &obj) {
            cout << "Real: " << obj.real << ", Imaginary: " << obj.imag << endl;
        }

        // Overloading assignment operator to copy data
        BCA_OOPS& operator=(BCA_OOPS &obj) {
            this->real = obj.real;
            this->imag = obj.imag;
            return *this;
        }

        // Member function to decrement values
        void decrementValues() {
            if(real >= 0 && real <= 10) {
                real -= 2;
            } else if(real > 10) {
                real -= 5;
            }

            if(imag >= 0 && imag <= 10) {
                imag -= 2;
            } else if(imag > 10) {
                imag -= 5;
            }
        }
};

int main() {
    BCA_OOPS obj1(15, 20);
    BCA_OOPS obj2;

    // Using this pointer to assign values
    obj2 = obj1;

    // Displaying values
    obj1.display();
    displayValues(obj1);

    // Decrementing values
    obj1.decrementValues();
    obj1.display();

    return 0;
}


answer2:

#include <iostream>
using namespace std;

class Student {
    private:
        string Name;
        int Age;
        string City;
        int academic_fee;
    public:
        Student() {
            Name = "";
            Age = 0;
            City = "";
            academic_fee = 0;
        }

        Student(string n, int a, string c, int f) {
            Name = n;
            Age = a;
            City = c;
            academic_fee = f;
        }

        void display() {
            cout << "Name: " << Name << ", Age: " << Age << ", City: " << City << ", Academic Fee: " << academic_fee << endl;
        }

        string getName() {
            return Name;
        }

        int getAge() {
            return Age;
        }

        string getCity() {
            return City;
        }

        int getAcademicFee() {
            return academic_fee;
        }
};

class Transport: public Student {
    private:
        int route;
        int bus_fee;
    public:
        Transport(): Student() {
            route = 0;
            bus_fee = 0;
        }

        Transport(string n, int a, string c, int f, int r, int b): Student(n, a, c, f) {
            route = r;
            bus_fee = b;
        }

        void show() {
            cout << "Name: " << getName() << ", Age: " << getAge() << ", City: " << getCity() << ", Academic Fee: " << getAcademicFee() << ", Route: " << route << ", Bus Fee: " << bus_fee << endl;
        }
};

int main() {
    Transport t("John Doe", 20, "New York", 5000, 1, 100);
    t.show();

    return 0;
}
